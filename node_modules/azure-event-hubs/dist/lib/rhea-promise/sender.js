"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const debugModule = require("debug");
const _1 = require(".");
const debug = debugModule("rhea-promise:sender");
class Sender {
    constructor(session, sender, options) {
        this._session = session;
        this._sender = sender;
        this.senderOptions = options;
    }
    get name() {
        return this._sender.name;
    }
    get error() {
        return this._sender.error;
    }
    get properties() {
        return this._sender.properties;
    }
    get source() {
        return this._sender.source;
    }
    get target() {
        return this._sender.target;
    }
    get address() {
        return this.source.address;
    }
    get credit() {
        return this._sender.credit;
    }
    get session() {
        return this._session;
    }
    get connection() {
        return this._session.connection;
    }
    /**
     * Determines whether the message is sendable.
     * @returns {boolean} `true` Sendable. `false` Not Sendable.
     */
    sendable() {
        return this._sender.sendable();
    }
    send(msg, tag, format) {
        return this._sender.send(msg, tag, format);
    }
    /**
     * Determines whether the sender link is open.
     * @returns {boolean} `true` open. `false` closed.
     */
    isOpen() {
        let result = false;
        if (this._session.isOpen() && this._sender.is_open()) {
            result = true;
        }
        return result;
    }
    remove() {
        if (this._sender) {
            this._sender.remove();
        }
        if (this._session) {
            this._session.remove();
        }
    }
    /**
     * Closes the amqp sender.
     * @return {Promise<void>} Promise<void>
     * - **Resolves** the promise when rhea emits the "sender_close" event.
     * - **Rejects** the promise with an AmqpError when rhea emits the
     * "sender_error" event while trying to close an amqp sender.
     */
    close() {
        const senderClose = new Promise((resolve, reject) => {
            if (this.isOpen()) {
                let onError;
                let onClose;
                onClose = (context) => {
                    this._sender.removeListener(_1.SenderEvents.senderClose, onClose);
                    process.nextTick(() => {
                        debug("Resolving the promise as the amqp sender has been closed.");
                        resolve();
                    });
                };
                onError = (context) => {
                    this._sender.removeListener(_1.SenderEvents.senderError, onError);
                    debug(`Error occurred while closing amqp sender.`, context.session.error);
                    reject(context.session.error);
                };
                this._sender.once(_1.SenderEvents.senderClose, onClose);
                this._sender.once(_1.SenderEvents.senderError, onError);
                this._sender.close();
            }
            else {
                resolve();
            }
        });
        return senderClose.then(() => { return this._session.close(); });
    }
    setMaxListeners(count) {
        this._sender.setMaxListeners(count);
    }
    getMaxListeners() {
        return this._sender.getMaxListeners();
    }
    registerHandler(event, handler) {
        this._sender.on(event, handler);
    }
    removeHandler(event, handler) {
        this._sender.removeListener(event, handler);
    }
    registerSessionHandler(event, handler) {
        this._session.registerHandler(event, handler);
    }
    removeSessionHandler(event, handler) {
        this._session.removeHandler(event, handler);
    }
}
exports.Sender = Sender;
//# sourceMappingURL=sender.js.map