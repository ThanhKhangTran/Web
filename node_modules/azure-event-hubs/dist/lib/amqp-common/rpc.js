"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const process = require("process");
const debugModule = require("debug");
const utils_1 = require("./util/utils");
const rhea_promise_1 = require("../rhea-promise");
const Constants = require("./util/constants");
const debug = debugModule("azure:amqp-common:rpc");
/**
 * Opens the AMQP connection to the EventHub/ServiceBus for this client, returning a promise
 * that will be resolved when the connection is completed.
 *
 * @param {ConnectionContext} context The connection context.
 * @param {boolean} [useSaslPlain]   True for using sasl plain mode for authentication, false otherwise.
 * @returns {Promise<Connection>} The Connection object.
 */
async function open(params) {
    try {
        return await utils_1.defaultLock.acquire("connect", () => { return _open(params); });
    }
    catch (err) {
        debug(err);
        throw err;
    }
}
exports.open = open;
async function _open(params) {
    const connectOptions = {
        transport: Constants.TLS,
        host: params.config.host,
        hostname: params.config.host,
        username: params.config.sharedAccessKeyName,
        port: 5671,
        reconnect: false,
        properties: {
            product: "MSJSClient",
            version: params.packageVersion,
            platform: `(${os.arch()}-${os.type()}-${os.release()})`,
            framework: `Node/${process.version}`,
            "user-agent": params.userAgent
        }
    };
    if (params.useSaslPlain) {
        connectOptions.password = params.config.sharedAccessKey;
    }
    debug("Dialing the amqp connection with options.", connectOptions);
    const connection = await new rhea_promise_1.Connection(connectOptions).open();
    debug("Successfully established the amqp connection '%s'.", connection.id);
    return connection;
}
//# sourceMappingURL=rpc.js.map