import * as rhea from "rhea";
import { Session } from "./session";
import { Connection } from "./connection";
import { ReceiverEvents } from ".";
export interface ReceiverOptions extends rhea.ReceiverOptions {
    onMessage?: rhea.OnAmqpEvent;
    onError?: rhea.OnAmqpEvent;
    onClose?: rhea.OnAmqpEvent;
}
export declare class Receiver {
    receiverOptions?: ReceiverOptions;
    private _session;
    private _receiver;
    constructor(session: Session, receiver: rhea.Receiver, options?: ReceiverOptions);
    readonly name: string;
    readonly error: rhea.AmqpError | Error | undefined;
    readonly properties: rhea.Dictionary<any>;
    readonly source: rhea.Source;
    readonly target: rhea.TerminusOptions;
    readonly address: string;
    readonly session: Session;
    readonly connection: Connection;
    readonly drain: boolean;
    addCredit(credit: number): void;
    setCreditWindow(creditWindow: number): void;
    /**
     * Determines whether the sender link is open.
     * @returns {boolean} `true` open. `false` closed.
     */
    isOpen(): boolean;
    remove(): void;
    /**
     * Closes the amqp receiver.
     * @return {Promise<void>} Promise<void>
     * - **Resolves** the promise when rhea emits the "receiver_close" event.
     * - **Rejects** the promise with an AmqpError when rhea emits the
     * "receiver_error" event while trying to close an amqp receiver.
     */
    close(): Promise<void>;
    registerHandler(event: ReceiverEvents, handler: rhea.OnAmqpEvent): void;
    removeHandler(event: ReceiverEvents, handler: rhea.OnAmqpEvent): void;
    registerSessionHandler(event: rhea.SessionEvents, handler: rhea.OnAmqpEvent): void;
    removeSessionHandler(event: rhea.SessionEvents, handler: rhea.OnAmqpEvent): void;
}
